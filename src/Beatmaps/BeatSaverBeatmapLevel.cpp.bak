#include "Beatmaps/BeatSaverBeatmapLevel.hpp"
#include "custom-types/shared/register.hpp"
#include "GlobalNamespace/VarIntExtensions.hpp"
#include "songloader/shared/API.hpp"
#include "songdownloader/shared/BeatSaverAPI.hpp"
#include "questui/shared/BeatSaberUI.hpp"
#include "questui/shared/CustomTypes/Components/MainThreadScheduler.hpp"

DEFINE_TYPE(MultiplayerCore::Beatmaps, BeatSaverBeatmapLevel);

namespace MultiplayerCore::Beatmaps {
	void BeatSaverBeatmapLevel::New(BeatSaver::Beatmap beatmap) {
		_beatmap = beatmap;
		levelHash = beatmap->levelHash;
	}

	System::Threading::Tasks::Task_1<UnityEngine::Sprite*>* BeatSaverBeatmapLevel::GetCoverImageAsync(System::Threading::CancellationToken cancellationToken) {
		if (!coverImageTask) {
			coverImageTask = System::Threading::Tasks::Task_1<UnityEngine::Sprite*>::New_ctor(static_cast<UnityEngine::Sprite*>(nullptr));
			reinterpret_cast<System::Threading::Tasks::Task*>(coverImageTask)->dyn_m_stateFlags() = System::Threading::Tasks::Task::TASK_STATE_STARTED;
			BeatSaver::API::GetCoverImageAsync(_beatmap, [this](std::vector<uint8_t> bytes) {
				QuestUI::MainThreadScheduler::Schedule([this, bytes] {
					getLogger().debug("Got coverImage from BeatSaver");
					coverImageTask->TrySetResult(QuestUI::BeatSaberUI::VectorToSprite(bytes));
					reinterpret_cast<System::Threading::Tasks::Task*>(coverImageTask)->dyn_m_stateFlags() = System::Threading::Tasks::Task::TASK_STATE_RAN_TO_COMPLETION;
					}
				);
				}
			);
		}
		if (coverImageTask)
			return coverImageTask;
		return System::Threading::Tasks::Task_1<UnityEngine::Sprite*>::New_ctor(static_cast<UnityEngine::Sprite*>(nullptr));
	}


#pragma region All the pain in form of getter functions

	StringW BeatSaverBeatmapLevel::get_songName() {
		return _beatmap->songName;
	}

	StringW BeatSaverBeatmapLevel::get_songSubName() {
		return _beatmap->songSubName;
	}

	StringW BeatSaverBeatmapLevel::get_songAuthorName() {
		return _beatmap->songAuthorName;
	}

	StringW BeatSaverBeatmapLevel::get_levelAuthorName() {
		return _beatmap->levelAuthorName;
	}

	float BeatSaverBeatmapLevel::get_beatsPerMinute() {
		return _beatmap->beatsPerMinute;
	}

	float BeatSaverBeatmapLevel::get_songDuration() {
		return _beatmap->songDuration;
	}

	//float BeatSaverBeatmapLevel::get_songTimeOffset() {
	//	return 0;
	//}

	//float BeatSaverBeatmapLevel::get_previewDuration() {
	//	return 0;
	//}

	//float BeatSaverBeatmapLevel::get_previewStartTime() {
	//	return 0;
	//}

	//float BeatSaverBeatmapLevel::get_shuffle() {
	//	return 0;
	//}

	//float BeatSaverBeatmapLevel::get_shufflePeriod() {
	//	return 0;
	//}

	//GlobalNamespace::EnvironmentInfoSO* BeatSaverBeatmapLevel::get_allDirectionsEnvironmentInfo() {
	//	return nullptr;
	//}

	//GlobalNamespace::EnvironmentInfoSO* BeatSaverBeatmapLevel::get_environmentInfo() {
	//	return nullptr;
	//}

	//::System::Collections::Generic::IReadOnlyList_1<::GlobalNamespace::PreviewDifficultyBeatmapSet*>* BeatSaverBeatmapLevel::get_previewDifficultyBeatmapSets() {
	//	return nullptr;
	//}

#pragma endregion
}

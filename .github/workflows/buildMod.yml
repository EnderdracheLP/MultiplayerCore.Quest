name: NDK build

on:
  workflow_dispatch:
  push:
    paths-ignore:
      - '**.yml'
      - '!.github/workflows/buildMod.yml'
      - '**.json'
      - '!qpm.json'
      - '**.ps1'
      - '!build.ps1'
      - '!buildQMOD.ps1'
      - '**.md'
      - '.gitignore'
      - '**.zip'

env:
     module_id: MultiplayerCore
    
jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      name: Checkout
      with:
        submodules: true
        lfs: true
        
    - name: Get Version
      shell: pwsh
      run: |
        $branchParts = '${{ github.ref_name }}'.Split('/'); $branchMain = $branchParts[0]; if ($branchParts[0] -match "^\d+$") { $branchMain = 'pr'; $branchSub = "$($branchParts[0])." } elseif ($branchParts.Length -eq 2) { $branchSub = "$($branchParts[1].Replace('.', '-'))." }; echo "version=$((Get-Content ./qpm.shared.json -Raw | ConvertFrom-Json).config.info.version.Replace('+', '-').Split('-')[0])-$($branchMain).${{ github.run_number }}+$($branchSub)ra${{ github.run_attempt }}.$($env:GITHUB_SHA.Substring(0, 7))" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        $branchParts = '${{ github.ref_name }}'.Split('/'); $branchMain = $branchParts[0]; if ($branchParts[0] -match "^\d+$") { $branchMain = 'pr'; $branchSub = "$($branchParts[0])." } elseif ($branchParts.Length -eq 2) { $branchSub = "$($branchParts[1].Replace('.', '-'))." }; echo "qmodversion=$((Get-Content ./qpm.shared.json -Raw | ConvertFrom-Json).config.info.version.Replace('+', '-').Split('-')[0])+$($branchMain).$($branchSub)r${{ github.run_number }}a${{ github.run_attempt }}.$($env:GITHUB_SHA.Substring(0, 7))" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

    - name: Get BSVersion
      shell: pwsh
      run: |
        echo "BSVersion=$((Get-Content ./mod.template.json -Raw | ConvertFrom-Json).packageVersion)" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

    - uses: seanmiddleditch/gha-setup-ninja@v5

    - name: Get QPM
      uses: Fernthedev/qpm-action@v1
      with:
        resolve_ndk: true
        #required
        workflow_token: ${{secrets.GITHUB_TOKEN}}
        restore: true # will run restore on download
        cache: true #will cache dependencies
        version: '${{ env.version }}'
        #qpm_qmod: '${{ env.module_id }}_${{ env.qmodversion }}.qmod'
        
    - name: QPM Collapse
      run: |
        qpm collapse
        
    - name: Check dependency Folders
      run: |
        echo "Checking extern includes"
        ls -lh ${GITHUB_WORKSPACE}/extern/includes
        echo ""
        echo "Checking libs"
        ls -lh ${GITHUB_WORKSPACE}/extern/libs
        echo ""
        echo "Checking QPM/cache Folder"
        ls -lh $HOME/.local/share/QPM-RS/cache
        echo ""

    # - name: Build
    #   run: |
    #     cd ${GITHUB_WORKSPACE}
    #     pwsh -Command ./build.ps1 -actions

    - name: Build & Package QMOD
      shell: pwsh
      run: |
        cd ${{ github.workspace }}
        qpm package edit --version ${{ env.qmodversion }}
        qpm qmod zip -i ./build/ -i ./extern/libs/ ${{ env.module_id }}_${{ env.qmodversion }}.qmod

    - name: Get Library Name
      id: libname
      run: |
        cd ./build/
        pattern="lib${module_id}*.so"
        files=( $pattern )
        echo "NAME=${files[0]}" >> $GITHUB_OUTPUT

    - name: Upload non-debug artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.libname.outputs.NAME }}
        path: ./build/${{ steps.libname.outputs.NAME }}
        if-no-files-found: error


    - name: Upload debug artifact
      uses: actions/upload-artifact@v4
      with:
        name: debug_${{ steps.libname.outputs.NAME }}
        path: ./build/debug/${{ steps.libname.outputs.NAME }}
        if-no-files-found: error


    - name: Upload QMOD
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.module_id }}-(UNZIP-for-QMOD).qmod
        path: ./${{ env.module_id }}_${{ env.qmodversion }}.qmod
        if-no-files-found: warn
